@startuml
skinparam backgroundColor #CCCCCC
skinparam linetype ortho

class App {
  {static} -final int HEIGHT
  {static} -final int WIDTH

  {static} +void main(String[] args)
  #void initImGui(Configuration config)
  +void process()
}

class Game {
  {static} -Game instance
  +enum Status {RUNNING, WON, LOST}

  +Game(final int width, final int height)
  {static} +Game getInstance()
  {static} +void createInstance(final int width, final int height)
  +void render()
  +Status turn()
}

class WorldMap {
  -final int width
  -final int height
  -final List<List<Cell>> cells
  {static} -WorldMap instance

  +WorldMap(final int width, final int height, final List<List<Cell>> cells)
  +int width()
  +int height()
  +List<List<Cell>> cells()
  {static} +WorldMap getInstance(final int width, final int height)
  {static} +WorldMap getInstance()
  +Cell getCell(final int x, final int y)
  +void insertUnits(final List<Unit> units)
  +Game.Status turn()
  +List<Unit> getUnits()
}
WorldMap o-- Cell

enum ResourceType {
  {field} +WOOD (spawnChance=0.3, maxVeinSize=50, job="Woodcutter")
  {field} +ROCK (spawnChance=0.3, maxVeinSize=50, job="Rock Miner")
  {field} +GOLD (spawnChance=0.3, maxVeinSize=50, job="Gold Miner")
  {field} +FOOD (spawnChance=0.3, maxVeinSize=50, job="Farmer")
  -final double spawnChance
  -final int maxVeinSize
  -final char symbol
  -final String job

  +ResourceType(final double spawnChance, final int maxVeinSize, final String job)
  {static} +ResourceType getRandomType()
  +double getSpawnChance()
  +int getMaxVeinSize()
  +char getSymbol()
  +String getJob()
}

class Inventory {
  {static} -Inventory instance
  -final Map<ResourceType, Integer> resources

  +Inventory()
  {static} +Inventory getInstance()
  +void add(final ResourceType type, final int amount)
  +void remove(final ResourceType type, final int amount)
  +void remove(final Map<ResourceType, Integer> resources)
  +int get(final ResourceType type)
  +boolean contains(final ResourceType type, final int amount)
  +boolean contains(final Map<ResourceType, Integer> resources)
}
Inventory o-- ResourceType

class Cell {
  -final int x;
  -final int y;
  -final ResourceType type;
  -int amount;
  -Unit unit;

  +Cell(final int x, final int y)
  +int getX()
  +int getY()
  +ResourceType getType()
  +int getAmount()
  +Unit getUnit()
  +void setUnit(final Unit unit)
  +void insertUnit(final Unit unit)
  +int mine(final int amount)
  +Cell findClosest(final List<ResourceType> types)
}
Cell o-- Unit
Cell o-- ResourceType

abstract class Producible {
  {abstract} +Map<ResourceType, Integer> getCost()
}
Producible o-- ResourceType

class Tool extends Producible {
  -final int efficiency
  -final List<ResourceType> targets

  +Tool(final int efficiency, final List<ResourceType> targets)
  +Map<ResourceType, Integer> getCost()
  +int getEfficiency()
  +List<ResourceType> getTargets()
  +boolean canMine(final ResourceType type)
}
Tool o-- ResourceType

class Unit extends Producible {
  -final int speed
  -final int hunger
  -final List<UnitModifier> modifiers
  -int x
  -int y
  -int xp
  -boolean canMine
  -Tool tool

  +Unit(final int x, final int y, final List<UnitModifier> modifiers)
  +Map<ResourceType, Integer> getCost()
  +int getX()
  +void setX(final int x)
  +int getY()
  +void setY(final int y)
  +int getSpeed()
  +int getHunger()
  +int getEfficiency()
  +List<ResourceType> getTargets()
  +int getXp()
  +void addXp(final int xp)
  +Tool getTool()
  +void setTool(final Tool tool)
  +boolean canMine()
  +void setCanMine(final boolean canMine)
  +List<UnitModifiers> getActiveModifiers()
  +boolean mine()
  +void move(final int x, final int y)
  +void eat()
  +void turn()
}
Unit o-- UnitModifier
Unit o-- Tool

class Group extends Unit {
  -final List<Unit> units

  +Group(final int x, final int y)
  +void addUnit(final Unit unit)
  +void removeUnit(final Unit unit)
  +List<Unit> getUnits()
  +void setX(final int x)
  +void setY(final int y)
  +int getSpeed()
  +int getHunger()
  +int getEfficiency()
  +List<ResourceType> getTargets()
  +int getXp()
  +void addXp(final int xp)
  +Tool getTool()
  +void setTool(final Tool tool)
  +boolean canMine()
  +void setCanMine(final boolean canMine)
  +boolean mine()
  +void eat()
  +void turn()
}
Group o-- Unit

class UnitModifier {
  #Unit unit
  #boolean active

  +Unit getUnit()
  +void setUnit(final Unit unit)
  +boolean isActive()
  +boolean isEfficiencyMultiplier()
  +int updateEfficiency(final int efficiency)
  +boolean isSpeedMultiplier()
  +int updateSpeed(final int speed)
  +boolean isHungerMultiplier()
  +int updateHunger(final int hunger)
  +void update()
}
UnitModifier o-- Unit

class ExpertModifier extends UnitModifier {
  -int deactivateCountdown

  +ExpertModifier()
  +boolean isEfficiencyMultiplier()
  +int updateEfficiency(final int efficiency)
  +boolean isSpeedMultiplier()
  +int updateSpeed(final int speed)
  +boolean isHungerMultiplier()
  +int updateHunger(final int hunger)
  +void update()
}

class RiderModifier extends UnitModifier {
  +boolean isSpeedMultiplier()
  +int updateSpeed(final int speed)
  +int updateHunger(final int hunger)
  +void update()
}

interface IBuilding<T> {
  +T produce()
}

class UnitBuilding implements IBuilding {
  +Unit produce()
}

class ToolBuilding implements IBuilding {
  +Tool produce()
}

@enduml